---
- name: Clone mastodon repo if not cloned
  git: 
    repo: "https://github.com/mastodon/mastodon.git" #"https://github.com/tootsuite/mastodon.git"
    dest: "{{ mastodon_path }}"
    update: no

# Not using file module because recursive chown with it is slow
- name: Chown everything to mastodon
  shell: "chown -R mastodon:mastodon {{ mastodon_path }}"

- name: Check for existing .env.production
  stat:
    path: "{{ mastodon_path }}/.env.production"
  register: envfile

- block: 
  - name: Generate pgsql password
    shell: uuidgen
    register: pgpass_uuid
    when: envfile.stat.exists == False 
   
  - name: Setup docker-compose file
    template:
      src: docker-compose.yml.j2
      dest: "{{ mastodon_path }}/docker-compose.yml"
      owner: mastodon
      group: mastodon

  - name: Setup partial .env.production to prepare for keys
    template:
      src: .env.production.j2
      dest: "{{ mastodon_path }}/.env.production"
      owner: mastodon
      group: mastodon
  
  - name: Generate secret key
    shell: docker-compose run --rm web rake secret | tail -1 
    args:
      chdir: "{{ mastodon_path }}"
    register: secret_key

  - name: Generate otp key
    shell: docker-compose run --rm web rake secret | tail -1 
    args:
      chdir: "{{ mastodon_path }}"
    register: otp_key

  - name: Set keys
    set_fact:
      secret_key_base: "{{ secret_key.stdout }}"
      otp_secret: "{{ otp_key.stdout }}"

  - name: Setup partial .env.production to prepare for vapid keys
    template:
      src: .env.production.j2
      dest: "{{ mastodon_path }}/.env.production"
      owner: mastodon
      group: mastodon
  
  - name: Generate VAPID keys
    shell: docker-compose run --rm web rake mastodon:webpush:generate_vapid_key
    args:
      chdir: "{{ mastodon_path }}"
    register: vapid_keys

  - name: Set VAPID keys
    set_fact:
      vapid_private_key: "{{ vapid_keys.stdout_lines[0] }}"
      vapid_public_key:  "{{ vapid_keys.stdout_lines[1] }}"
  
  - name: Setup .env.production
    template:
      src: .env.production.j2
      dest: "{{ mastodon_path }}/.env.production"
      owner: mastodon
      group: mastodon

  - name: Stop all containers
    shell: docker-compose down
    args:
      chdir: "{{ mastodon_path }}"

  - name: Wipe db data dir
    file:
      path: "{{ postgres_data_path }}"
      state: absent

  - name: Do initial DB setup after .env.production is setup
    shell: docker-compose run --rm -e SAFETY_ASSURED=1 web rake db:setup
    args:
      chdir: "{{ mastodon_path }}"

  # Need this step for the static pages step (cf. https://github.com/rails/webpacker/issues/2674)
  - name: Compile Webpacker
    shell: docker-compose run --rm web rails webpacker:compile
    args:
      chdir: "{{ mastodon_path }}"
      
  # Assets precompile does not seem to generate everything unless this is run first, confusingly.
  - name: Generate static pages
    shell: docker-compose run --rm web rake assets:generate_static_pages
    args:
      chdir: "{{ mastodon_path }}"

  - name: Do precompiling of assets
    shell: docker-compose run --rm web rake assets:precompile
    args:
      chdir: "{{ mastodon_path }}"
  when: envfile.stat.exists == False

- name: Start mastodon
  shell: docker-compose up -d
  args:
    chdir: "{{ mastodon_path }}"